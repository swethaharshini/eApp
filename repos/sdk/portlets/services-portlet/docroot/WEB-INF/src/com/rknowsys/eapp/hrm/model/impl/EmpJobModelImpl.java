/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rknowsys.eapp.hrm.model.EmpJob;
import com.rknowsys.eapp.hrm.model.EmpJobModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EmpJob service. Represents a row in the &quot;emp_job&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rknowsys.eapp.hrm.model.EmpJobModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmpJobImpl}.
 * </p>
 *
 * @author rknowsys
 * @see EmpJobImpl
 * @see com.rknowsys.eapp.hrm.model.EmpJob
 * @see com.rknowsys.eapp.hrm.model.EmpJobModel
 * @generated
 */
public class EmpJobModelImpl extends BaseModelImpl<EmpJob>
	implements EmpJobModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emp job model instance should use the {@link com.rknowsys.eapp.hrm.model.EmpJob} interface instead.
	 */
	public static final String TABLE_NAME = "emp_job";
	public static final Object[][] TABLE_COLUMNS = {
			{ "empJobId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "joinedDate", Types.TIMESTAMP },
			{ "probationEndDate", Types.TIMESTAMP },
			{ "permanentDate", Types.TIMESTAMP },
			{ "jobTitleId", Types.BIGINT },
			{ "employmentStatusId", Types.BIGINT },
			{ "jobCategoryId", Types.BIGINT },
			{ "subUnitId", Types.BIGINT },
			{ "locationId", Types.BIGINT },
			{ "effectiveDate", Types.TIMESTAMP },
			{ "shiftId", Types.BIGINT },
			{ "comments", Types.VARCHAR },
			{ "isCurrentJob", Types.BOOLEAN },
			{ "employmentContractStartDate", Types.TIMESTAMP },
			{ "employmentContractEndDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table emp_job (empJobId LONG not null primary key,employeeId LONG,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,joinedDate DATE null,probationEndDate DATE null,permanentDate DATE null,jobTitleId LONG,employmentStatusId LONG,jobCategoryId LONG,subUnitId LONG,locationId LONG,effectiveDate DATE null,shiftId LONG,comments VARCHAR(75) null,isCurrentJob BOOLEAN,employmentContractStartDate DATE null,employmentContractEndDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table emp_job";
	public static final String ORDER_BY_JPQL = " ORDER BY empJob.empJobId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY emp_job.empJobId ASC";
	public static final String DATA_SOURCE = "hrmDataSource";
	public static final String SESSION_FACTORY = "hrmSessionFactory";
	public static final String TX_MANAGER = "hrmTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rknowsys.eapp.hrm.model.EmpJob"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rknowsys.eapp.hrm.model.EmpJob"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rknowsys.eapp.hrm.model.EmpJob"),
			true);
	public static long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long EMPJOBID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rknowsys.eapp.hrm.model.EmpJob"));

	public EmpJobModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empJobId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpJobId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empJobId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmpJob.class;
	}

	@Override
	public String getModelClassName() {
		return EmpJob.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("empJobId", getEmpJobId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("joinedDate", getJoinedDate());
		attributes.put("probationEndDate", getProbationEndDate());
		attributes.put("permanentDate", getPermanentDate());
		attributes.put("jobTitleId", getJobTitleId());
		attributes.put("employmentStatusId", getEmploymentStatusId());
		attributes.put("jobCategoryId", getJobCategoryId());
		attributes.put("subUnitId", getSubUnitId());
		attributes.put("locationId", getLocationId());
		attributes.put("effectiveDate", getEffectiveDate());
		attributes.put("shiftId", getShiftId());
		attributes.put("comments", getComments());
		attributes.put("isCurrentJob", getIsCurrentJob());
		attributes.put("employmentContractStartDate",
			getEmploymentContractStartDate());
		attributes.put("employmentContractEndDate",
			getEmploymentContractEndDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long empJobId = (Long)attributes.get("empJobId");

		if (empJobId != null) {
			setEmpJobId(empJobId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date joinedDate = (Date)attributes.get("joinedDate");

		if (joinedDate != null) {
			setJoinedDate(joinedDate);
		}

		Date probationEndDate = (Date)attributes.get("probationEndDate");

		if (probationEndDate != null) {
			setProbationEndDate(probationEndDate);
		}

		Date permanentDate = (Date)attributes.get("permanentDate");

		if (permanentDate != null) {
			setPermanentDate(permanentDate);
		}

		Long jobTitleId = (Long)attributes.get("jobTitleId");

		if (jobTitleId != null) {
			setJobTitleId(jobTitleId);
		}

		Long employmentStatusId = (Long)attributes.get("employmentStatusId");

		if (employmentStatusId != null) {
			setEmploymentStatusId(employmentStatusId);
		}

		Long jobCategoryId = (Long)attributes.get("jobCategoryId");

		if (jobCategoryId != null) {
			setJobCategoryId(jobCategoryId);
		}

		Long subUnitId = (Long)attributes.get("subUnitId");

		if (subUnitId != null) {
			setSubUnitId(subUnitId);
		}

		Long locationId = (Long)attributes.get("locationId");

		if (locationId != null) {
			setLocationId(locationId);
		}

		Date effectiveDate = (Date)attributes.get("effectiveDate");

		if (effectiveDate != null) {
			setEffectiveDate(effectiveDate);
		}

		Long shiftId = (Long)attributes.get("shiftId");

		if (shiftId != null) {
			setShiftId(shiftId);
		}

		String comments = (String)attributes.get("comments");

		if (comments != null) {
			setComments(comments);
		}

		Boolean isCurrentJob = (Boolean)attributes.get("isCurrentJob");

		if (isCurrentJob != null) {
			setIsCurrentJob(isCurrentJob);
		}

		Date employmentContractStartDate = (Date)attributes.get(
				"employmentContractStartDate");

		if (employmentContractStartDate != null) {
			setEmploymentContractStartDate(employmentContractStartDate);
		}

		Date employmentContractEndDate = (Date)attributes.get(
				"employmentContractEndDate");

		if (employmentContractEndDate != null) {
			setEmploymentContractEndDate(employmentContractEndDate);
		}
	}

	@Override
	public long getEmpJobId() {
		return _empJobId;
	}

	@Override
	public void setEmpJobId(long empJobId) {
		_empJobId = empJobId;
	}

	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public Date getJoinedDate() {
		return _joinedDate;
	}

	@Override
	public void setJoinedDate(Date joinedDate) {
		_joinedDate = joinedDate;
	}

	@Override
	public Date getProbationEndDate() {
		return _probationEndDate;
	}

	@Override
	public void setProbationEndDate(Date probationEndDate) {
		_probationEndDate = probationEndDate;
	}

	@Override
	public Date getPermanentDate() {
		return _permanentDate;
	}

	@Override
	public void setPermanentDate(Date permanentDate) {
		_permanentDate = permanentDate;
	}

	@Override
	public long getJobTitleId() {
		return _jobTitleId;
	}

	@Override
	public void setJobTitleId(long jobTitleId) {
		_jobTitleId = jobTitleId;
	}

	@Override
	public long getEmploymentStatusId() {
		return _employmentStatusId;
	}

	@Override
	public void setEmploymentStatusId(long employmentStatusId) {
		_employmentStatusId = employmentStatusId;
	}

	@Override
	public long getJobCategoryId() {
		return _jobCategoryId;
	}

	@Override
	public void setJobCategoryId(long jobCategoryId) {
		_jobCategoryId = jobCategoryId;
	}

	@Override
	public long getSubUnitId() {
		return _subUnitId;
	}

	@Override
	public void setSubUnitId(long subUnitId) {
		_subUnitId = subUnitId;
	}

	@Override
	public long getLocationId() {
		return _locationId;
	}

	@Override
	public void setLocationId(long locationId) {
		_locationId = locationId;
	}

	@Override
	public Date getEffectiveDate() {
		return _effectiveDate;
	}

	@Override
	public void setEffectiveDate(Date effectiveDate) {
		_effectiveDate = effectiveDate;
	}

	@Override
	public long getShiftId() {
		return _shiftId;
	}

	@Override
	public void setShiftId(long shiftId) {
		_shiftId = shiftId;
	}

	@Override
	public String getComments() {
		if (_comments == null) {
			return StringPool.BLANK;
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		_comments = comments;
	}

	@Override
	public boolean getIsCurrentJob() {
		return _isCurrentJob;
	}

	@Override
	public boolean isIsCurrentJob() {
		return _isCurrentJob;
	}

	@Override
	public void setIsCurrentJob(boolean isCurrentJob) {
		_isCurrentJob = isCurrentJob;
	}

	@Override
	public Date getEmploymentContractStartDate() {
		return _employmentContractStartDate;
	}

	@Override
	public void setEmploymentContractStartDate(Date employmentContractStartDate) {
		_employmentContractStartDate = employmentContractStartDate;
	}

	@Override
	public Date getEmploymentContractEndDate() {
		return _employmentContractEndDate;
	}

	@Override
	public void setEmploymentContractEndDate(Date employmentContractEndDate) {
		_employmentContractEndDate = employmentContractEndDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EmpJob.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmpJob toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmpJob)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmpJobImpl empJobImpl = new EmpJobImpl();

		empJobImpl.setEmpJobId(getEmpJobId());
		empJobImpl.setEmployeeId(getEmployeeId());
		empJobImpl.setGroupId(getGroupId());
		empJobImpl.setCompanyId(getCompanyId());
		empJobImpl.setCreateDate(getCreateDate());
		empJobImpl.setModifiedDate(getModifiedDate());
		empJobImpl.setUserId(getUserId());
		empJobImpl.setJoinedDate(getJoinedDate());
		empJobImpl.setProbationEndDate(getProbationEndDate());
		empJobImpl.setPermanentDate(getPermanentDate());
		empJobImpl.setJobTitleId(getJobTitleId());
		empJobImpl.setEmploymentStatusId(getEmploymentStatusId());
		empJobImpl.setJobCategoryId(getJobCategoryId());
		empJobImpl.setSubUnitId(getSubUnitId());
		empJobImpl.setLocationId(getLocationId());
		empJobImpl.setEffectiveDate(getEffectiveDate());
		empJobImpl.setShiftId(getShiftId());
		empJobImpl.setComments(getComments());
		empJobImpl.setIsCurrentJob(getIsCurrentJob());
		empJobImpl.setEmploymentContractStartDate(getEmploymentContractStartDate());
		empJobImpl.setEmploymentContractEndDate(getEmploymentContractEndDate());

		empJobImpl.resetOriginalValues();

		return empJobImpl;
	}

	@Override
	public int compareTo(EmpJob empJob) {
		long primaryKey = empJob.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmpJob)) {
			return false;
		}

		EmpJob empJob = (EmpJob)obj;

		long primaryKey = empJob.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmpJobModelImpl empJobModelImpl = this;

		empJobModelImpl._originalEmployeeId = empJobModelImpl._employeeId;

		empJobModelImpl._setOriginalEmployeeId = false;

		empJobModelImpl._originalGroupId = empJobModelImpl._groupId;

		empJobModelImpl._setOriginalGroupId = false;

		empJobModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmpJob> toCacheModel() {
		EmpJobCacheModel empJobCacheModel = new EmpJobCacheModel();

		empJobCacheModel.empJobId = getEmpJobId();

		empJobCacheModel.employeeId = getEmployeeId();

		empJobCacheModel.groupId = getGroupId();

		empJobCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			empJobCacheModel.createDate = createDate.getTime();
		}
		else {
			empJobCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			empJobCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			empJobCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		empJobCacheModel.userId = getUserId();

		Date joinedDate = getJoinedDate();

		if (joinedDate != null) {
			empJobCacheModel.joinedDate = joinedDate.getTime();
		}
		else {
			empJobCacheModel.joinedDate = Long.MIN_VALUE;
		}

		Date probationEndDate = getProbationEndDate();

		if (probationEndDate != null) {
			empJobCacheModel.probationEndDate = probationEndDate.getTime();
		}
		else {
			empJobCacheModel.probationEndDate = Long.MIN_VALUE;
		}

		Date permanentDate = getPermanentDate();

		if (permanentDate != null) {
			empJobCacheModel.permanentDate = permanentDate.getTime();
		}
		else {
			empJobCacheModel.permanentDate = Long.MIN_VALUE;
		}

		empJobCacheModel.jobTitleId = getJobTitleId();

		empJobCacheModel.employmentStatusId = getEmploymentStatusId();

		empJobCacheModel.jobCategoryId = getJobCategoryId();

		empJobCacheModel.subUnitId = getSubUnitId();

		empJobCacheModel.locationId = getLocationId();

		Date effectiveDate = getEffectiveDate();

		if (effectiveDate != null) {
			empJobCacheModel.effectiveDate = effectiveDate.getTime();
		}
		else {
			empJobCacheModel.effectiveDate = Long.MIN_VALUE;
		}

		empJobCacheModel.shiftId = getShiftId();

		empJobCacheModel.comments = getComments();

		String comments = empJobCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			empJobCacheModel.comments = null;
		}

		empJobCacheModel.isCurrentJob = getIsCurrentJob();

		Date employmentContractStartDate = getEmploymentContractStartDate();

		if (employmentContractStartDate != null) {
			empJobCacheModel.employmentContractStartDate = employmentContractStartDate.getTime();
		}
		else {
			empJobCacheModel.employmentContractStartDate = Long.MIN_VALUE;
		}

		Date employmentContractEndDate = getEmploymentContractEndDate();

		if (employmentContractEndDate != null) {
			empJobCacheModel.employmentContractEndDate = employmentContractEndDate.getTime();
		}
		else {
			empJobCacheModel.employmentContractEndDate = Long.MIN_VALUE;
		}

		return empJobCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{empJobId=");
		sb.append(getEmpJobId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", joinedDate=");
		sb.append(getJoinedDate());
		sb.append(", probationEndDate=");
		sb.append(getProbationEndDate());
		sb.append(", permanentDate=");
		sb.append(getPermanentDate());
		sb.append(", jobTitleId=");
		sb.append(getJobTitleId());
		sb.append(", employmentStatusId=");
		sb.append(getEmploymentStatusId());
		sb.append(", jobCategoryId=");
		sb.append(getJobCategoryId());
		sb.append(", subUnitId=");
		sb.append(getSubUnitId());
		sb.append(", locationId=");
		sb.append(getLocationId());
		sb.append(", effectiveDate=");
		sb.append(getEffectiveDate());
		sb.append(", shiftId=");
		sb.append(getShiftId());
		sb.append(", comments=");
		sb.append(getComments());
		sb.append(", isCurrentJob=");
		sb.append(getIsCurrentJob());
		sb.append(", employmentContractStartDate=");
		sb.append(getEmploymentContractStartDate());
		sb.append(", employmentContractEndDate=");
		sb.append(getEmploymentContractEndDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("com.rknowsys.eapp.hrm.model.EmpJob");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>empJobId</column-name><column-value><![CDATA[");
		sb.append(getEmpJobId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>joinedDate</column-name><column-value><![CDATA[");
		sb.append(getJoinedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>probationEndDate</column-name><column-value><![CDATA[");
		sb.append(getProbationEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permanentDate</column-name><column-value><![CDATA[");
		sb.append(getPermanentDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobTitleId</column-name><column-value><![CDATA[");
		sb.append(getJobTitleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employmentStatusId</column-name><column-value><![CDATA[");
		sb.append(getEmploymentStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>jobCategoryId</column-name><column-value><![CDATA[");
		sb.append(getJobCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subUnitId</column-name><column-value><![CDATA[");
		sb.append(getSubUnitId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locationId</column-name><column-value><![CDATA[");
		sb.append(getLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>effectiveDate</column-name><column-value><![CDATA[");
		sb.append(getEffectiveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shiftId</column-name><column-value><![CDATA[");
		sb.append(getShiftId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>comments</column-name><column-value><![CDATA[");
		sb.append(getComments());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isCurrentJob</column-name><column-value><![CDATA[");
		sb.append(getIsCurrentJob());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employmentContractStartDate</column-name><column-value><![CDATA[");
		sb.append(getEmploymentContractStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employmentContractEndDate</column-name><column-value><![CDATA[");
		sb.append(getEmploymentContractEndDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmpJob.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { EmpJob.class };
	private long _empJobId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private Date _joinedDate;
	private Date _probationEndDate;
	private Date _permanentDate;
	private long _jobTitleId;
	private long _employmentStatusId;
	private long _jobCategoryId;
	private long _subUnitId;
	private long _locationId;
	private Date _effectiveDate;
	private long _shiftId;
	private String _comments;
	private boolean _isCurrentJob;
	private Date _employmentContractStartDate;
	private Date _employmentContractEndDate;
	private long _columnBitmask;
	private EmpJob _escapedModel;
}