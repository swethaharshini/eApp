/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rknowsys.eapp.hrm.model.EmpMembership;
import com.rknowsys.eapp.hrm.model.EmpMembershipModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EmpMembership service. Represents a row in the &quot;emp_membership&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rknowsys.eapp.hrm.model.EmpMembershipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmpMembershipImpl}.
 * </p>
 *
 * @author rknowsys
 * @see EmpMembershipImpl
 * @see com.rknowsys.eapp.hrm.model.EmpMembership
 * @see com.rknowsys.eapp.hrm.model.EmpMembershipModel
 * @generated
 */
public class EmpMembershipModelImpl extends BaseModelImpl<EmpMembership>
	implements EmpMembershipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a emp membership model instance should use the {@link com.rknowsys.eapp.hrm.model.EmpMembership} interface instead.
	 */
	public static final String TABLE_NAME = "emp_membership";
	public static final Object[][] TABLE_COLUMNS = {
			{ "empMembershipId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "membershipId", Types.BIGINT },
			{ "subscriptionPaidBy", Types.VARCHAR },
			{ "subscriptionAmt", Types.BIGINT },
			{ "currency_", Types.VARCHAR },
			{ "commenceDate", Types.TIMESTAMP },
			{ "renewalDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table emp_membership (empMembershipId LONG not null primary key,employeeId LONG,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,membershipId LONG,subscriptionPaidBy VARCHAR(75) null,subscriptionAmt LONG,currency_ VARCHAR(75) null,commenceDate DATE null,renewalDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table emp_membership";
	public static final String ORDER_BY_JPQL = " ORDER BY empMembership.empMembershipId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY emp_membership.empMembershipId ASC";
	public static final String DATA_SOURCE = "hrmDataSource";
	public static final String SESSION_FACTORY = "hrmSessionFactory";
	public static final String TX_MANAGER = "hrmTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rknowsys.eapp.hrm.model.EmpMembership"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rknowsys.eapp.hrm.model.EmpMembership"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rknowsys.eapp.hrm.model.EmpMembership"),
			true);
	public static long EMPLOYEEID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long MEMBERSHIPID_COLUMN_BITMASK = 4L;
	public static long EMPMEMBERSHIPID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rknowsys.eapp.hrm.model.EmpMembership"));

	public EmpMembershipModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _empMembershipId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEmpMembershipId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _empMembershipId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EmpMembership.class;
	}

	@Override
	public String getModelClassName() {
		return EmpMembership.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("empMembershipId", getEmpMembershipId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("membershipId", getMembershipId());
		attributes.put("subscriptionPaidBy", getSubscriptionPaidBy());
		attributes.put("subscriptionAmt", getSubscriptionAmt());
		attributes.put("currency", getCurrency());
		attributes.put("commenceDate", getCommenceDate());
		attributes.put("renewalDate", getRenewalDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long empMembershipId = (Long)attributes.get("empMembershipId");

		if (empMembershipId != null) {
			setEmpMembershipId(empMembershipId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long membershipId = (Long)attributes.get("membershipId");

		if (membershipId != null) {
			setMembershipId(membershipId);
		}

		String subscriptionPaidBy = (String)attributes.get("subscriptionPaidBy");

		if (subscriptionPaidBy != null) {
			setSubscriptionPaidBy(subscriptionPaidBy);
		}

		Long subscriptionAmt = (Long)attributes.get("subscriptionAmt");

		if (subscriptionAmt != null) {
			setSubscriptionAmt(subscriptionAmt);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		Date commenceDate = (Date)attributes.get("commenceDate");

		if (commenceDate != null) {
			setCommenceDate(commenceDate);
		}

		Date renewalDate = (Date)attributes.get("renewalDate");

		if (renewalDate != null) {
			setRenewalDate(renewalDate);
		}
	}

	@Override
	public long getEmpMembershipId() {
		return _empMembershipId;
	}

	@Override
	public void setEmpMembershipId(long empMembershipId) {
		_empMembershipId = empMembershipId;
	}

	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getMembershipId() {
		return _membershipId;
	}

	@Override
	public void setMembershipId(long membershipId) {
		_columnBitmask |= MEMBERSHIPID_COLUMN_BITMASK;

		if (!_setOriginalMembershipId) {
			_setOriginalMembershipId = true;

			_originalMembershipId = _membershipId;
		}

		_membershipId = membershipId;
	}

	public long getOriginalMembershipId() {
		return _originalMembershipId;
	}

	@Override
	public String getSubscriptionPaidBy() {
		if (_subscriptionPaidBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _subscriptionPaidBy;
		}
	}

	@Override
	public void setSubscriptionPaidBy(String subscriptionPaidBy) {
		_subscriptionPaidBy = subscriptionPaidBy;
	}

	@Override
	public long getSubscriptionAmt() {
		return _subscriptionAmt;
	}

	@Override
	public void setSubscriptionAmt(long subscriptionAmt) {
		_subscriptionAmt = subscriptionAmt;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public Date getCommenceDate() {
		return _commenceDate;
	}

	@Override
	public void setCommenceDate(Date commenceDate) {
		_commenceDate = commenceDate;
	}

	@Override
	public Date getRenewalDate() {
		return _renewalDate;
	}

	@Override
	public void setRenewalDate(Date renewalDate) {
		_renewalDate = renewalDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EmpMembership.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EmpMembership toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EmpMembership)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EmpMembershipImpl empMembershipImpl = new EmpMembershipImpl();

		empMembershipImpl.setEmpMembershipId(getEmpMembershipId());
		empMembershipImpl.setEmployeeId(getEmployeeId());
		empMembershipImpl.setGroupId(getGroupId());
		empMembershipImpl.setCompanyId(getCompanyId());
		empMembershipImpl.setCreateDate(getCreateDate());
		empMembershipImpl.setModifiedDate(getModifiedDate());
		empMembershipImpl.setUserId(getUserId());
		empMembershipImpl.setMembershipId(getMembershipId());
		empMembershipImpl.setSubscriptionPaidBy(getSubscriptionPaidBy());
		empMembershipImpl.setSubscriptionAmt(getSubscriptionAmt());
		empMembershipImpl.setCurrency(getCurrency());
		empMembershipImpl.setCommenceDate(getCommenceDate());
		empMembershipImpl.setRenewalDate(getRenewalDate());

		empMembershipImpl.resetOriginalValues();

		return empMembershipImpl;
	}

	@Override
	public int compareTo(EmpMembership empMembership) {
		long primaryKey = empMembership.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EmpMembership)) {
			return false;
		}

		EmpMembership empMembership = (EmpMembership)obj;

		long primaryKey = empMembership.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EmpMembershipModelImpl empMembershipModelImpl = this;

		empMembershipModelImpl._originalEmployeeId = empMembershipModelImpl._employeeId;

		empMembershipModelImpl._setOriginalEmployeeId = false;

		empMembershipModelImpl._originalGroupId = empMembershipModelImpl._groupId;

		empMembershipModelImpl._setOriginalGroupId = false;

		empMembershipModelImpl._originalMembershipId = empMembershipModelImpl._membershipId;

		empMembershipModelImpl._setOriginalMembershipId = false;

		empMembershipModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EmpMembership> toCacheModel() {
		EmpMembershipCacheModel empMembershipCacheModel = new EmpMembershipCacheModel();

		empMembershipCacheModel.empMembershipId = getEmpMembershipId();

		empMembershipCacheModel.employeeId = getEmployeeId();

		empMembershipCacheModel.groupId = getGroupId();

		empMembershipCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			empMembershipCacheModel.createDate = createDate.getTime();
		}
		else {
			empMembershipCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			empMembershipCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			empMembershipCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		empMembershipCacheModel.userId = getUserId();

		empMembershipCacheModel.membershipId = getMembershipId();

		empMembershipCacheModel.subscriptionPaidBy = getSubscriptionPaidBy();

		String subscriptionPaidBy = empMembershipCacheModel.subscriptionPaidBy;

		if ((subscriptionPaidBy != null) && (subscriptionPaidBy.length() == 0)) {
			empMembershipCacheModel.subscriptionPaidBy = null;
		}

		empMembershipCacheModel.subscriptionAmt = getSubscriptionAmt();

		empMembershipCacheModel.currency = getCurrency();

		String currency = empMembershipCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			empMembershipCacheModel.currency = null;
		}

		Date commenceDate = getCommenceDate();

		if (commenceDate != null) {
			empMembershipCacheModel.commenceDate = commenceDate.getTime();
		}
		else {
			empMembershipCacheModel.commenceDate = Long.MIN_VALUE;
		}

		Date renewalDate = getRenewalDate();

		if (renewalDate != null) {
			empMembershipCacheModel.renewalDate = renewalDate.getTime();
		}
		else {
			empMembershipCacheModel.renewalDate = Long.MIN_VALUE;
		}

		return empMembershipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{empMembershipId=");
		sb.append(getEmpMembershipId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", membershipId=");
		sb.append(getMembershipId());
		sb.append(", subscriptionPaidBy=");
		sb.append(getSubscriptionPaidBy());
		sb.append(", subscriptionAmt=");
		sb.append(getSubscriptionAmt());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", commenceDate=");
		sb.append(getCommenceDate());
		sb.append(", renewalDate=");
		sb.append(getRenewalDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.rknowsys.eapp.hrm.model.EmpMembership");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>empMembershipId</column-name><column-value><![CDATA[");
		sb.append(getEmpMembershipId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>membershipId</column-name><column-value><![CDATA[");
		sb.append(getMembershipId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscriptionPaidBy</column-name><column-value><![CDATA[");
		sb.append(getSubscriptionPaidBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subscriptionAmt</column-name><column-value><![CDATA[");
		sb.append(getSubscriptionAmt());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>commenceDate</column-name><column-value><![CDATA[");
		sb.append(getCommenceDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>renewalDate</column-name><column-value><![CDATA[");
		sb.append(getRenewalDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EmpMembership.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EmpMembership.class
		};
	private long _empMembershipId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private long _membershipId;
	private long _originalMembershipId;
	private boolean _setOriginalMembershipId;
	private String _subscriptionPaidBy;
	private long _subscriptionAmt;
	private String _currency;
	private Date _commenceDate;
	private Date _renewalDate;
	private long _columnBitmask;
	private EmpMembership _escapedModel;
}